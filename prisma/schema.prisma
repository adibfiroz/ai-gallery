generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  downloads      Int       @default(0)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts    Account[]
  collections Collection[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserDownloadLimit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique
  count        Int      @default(0)
  captionCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  credits                Int       @default(0)
  amount                 Int?
  plan                   String?
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  caption     String
  img         String
  orientation Orients
  views       Int      @default(0)
  Pro         Boolean  @default(false)
  tags        String[]
  userlikeIds String[] @db.ObjectId
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())

  collections   Collection[] @relation(fields: [collectionIds], references: [id])
  collectionIds String[]     @db.ObjectId
}

model Collection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  images   Image[]  @relation(fields: [imageIds], references: [id])
  imageIds String[] @db.ObjectId

  @@unique([name, userId])
}

enum Orients {
  landscape
  portrait
  square
}

model Tags {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  relatedTags String[]
}
